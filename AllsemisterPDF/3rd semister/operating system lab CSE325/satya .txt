1)write a program to implement the process syncronization using mutex lock in c programming
#include <stdio.h>
#include <pthread.h>

// Shared data
int counter = 0;

// Mutex lock
pthread_mutex_t mutex;

// Function to increment the counter
void *incrementCounter(void *arg) {
    int i;
    for (i = 0; i < 10000; i++) {
        // Acquire the mutex lock
        pthread_mutex_lock(&mutex);

        // Critical section
        counter++;

        // Release the mutex lock
        pthread_mutex_unlock(&mutex);
    }
    pthread_exit(NULL);
}

int main() {
    // Initialize the mutex
    pthread_mutex_init(&mutex, NULL);

    // Threads
    pthread_t thread1, thread2;

    // Create threads
    pthread_create(&thread1, NULL, incrementCounter, NULL);
    pthread_create(&thread2, NULL, incrementCounter, NULL);

    // Join threads
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    // Destroy the mutex
    pthread_mutex_destroy(&mutex);

    // Print the final value of the counter
    printf("Final Counter Value: %d\n", counter);

    return 0;
}



2)write a program to open a file in read only mode and read the last five character from the file print the same on terminal in c programming
#include <stdio.h>

int main() {
    // File path
    const char *filePath = "example.txt"; // Replace with your file path

    // Open the file in read-only mode
    FILE *file = fopen(filePath, "r");

    // Check if the file was opened successfully
    if (file == NULL) {
        perror("Error opening file");
        return 1; // Return an error code
    }

    // Seek to the end of the file
    if (fseek(file, -5, SEEK_END) != 0) {
        perror("Error seeking to the end of the file");
        fclose(file);
        return 1; // Return an error code
    }

    // Read and print the last five characters
    char buffer[6]; // 5 characters + null terminator
    if (fread(buffer, 1, sizeof(buffer) - 1, file) != sizeof(buffer) - 1) {
        perror("Error reading file");
        fclose(file);
        return 1; // Return an error code
    }

    // Null-terminate the buffer
    buffer[sizeof(buffer) - 1] = '\0';

    // Print the last five characters
    printf("Last five characters: %s\n", buffer);

    // Close the file
    fclose(file);

    return 0;
}




3)
write a program to create a file with some line of content and write hello into the file after four character from starting using system call in C programming

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    // File path
    const char *filePath = "example.txt"; // Replace with your file path

    // Create or open the file with write and read permissions
    int fileDescriptor = open(filePath, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
    
    // Check if the file was opened successfully
    if (fileDescriptor == -1) {
        perror("Error opening file");
        return 1; // Return an error code
    }

    // Content to be written to the file
    const char *content = "This is a sample file content.";

    // Write content to the file
    if (write(fileDescriptor, content, strlen(content)) == -1) {
        perror("Error writing to file");
        close(fileDescriptor);
        return 1; // Return an error code
    }

    // Seek to the fourth character from the beginning
    if (lseek(fileDescriptor, 4, SEEK_SET) == -1) {
        perror("Error seeking in file");
        close(fileDescriptor);
        return 1; // Return an error code
    }

    // Write "hello" after the fourth character
    const char *hello = "hello";
    if (write(fileDescriptor, hello, strlen(hello)) == -1) {
        perror("Error writing to file");
        close(fileDescriptor);
        return 1; // Return an error code
    }

    // Close the file
    close(fileDescriptor);

    printf("File created and modified successfully.\n");

    return 0;
}


4)write a program to calculate addition of two number in parent process and display result in child process in C programming
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    // Numbers to add
    int num1, num2;

    // Get user input for two numbers
    printf("Enter the first number: ");
    scanf("%d", &num1);
    printf("Enter the second number: ");
    scanf("%d", &num2);

    // Create a variable to store the result
    int result;

    // Create a variable to store the process ID
    pid_t pid;

    // Fork a child process
    pid = fork();

    // Check for errors during fork
    if (pid < 0) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    // Parent process
    if (pid > 0) {
        // Wait for the child process to finish
        wait(NULL);

        // Print the result in the parent process
        printf("Parent process: The sum of %d and %d is %d\n", num1, num2, result);
    }
    // Child process
    else if (pid == 0) {
        // Calculate the sum in the child process
        result = num1 + num2;

        // Display the result in the child process
        printf("Child process: The sum of %d and %d is %d\n", num1, num2, result);
    }

    return 0;
}



5)write a program to write into a pipe using be popen() and be pclosed() function in c programming
#include <stdio.h>
#include <stdlib.h>

int main() {
    // Command to execute using popen
    const char *command = "grep root /etc/passwd";

    // Open a pipe to the command
    FILE *pipe = popen(command, "r");

    // Check if the pipe was opened successfully
    if (pipe == NULL) {
        perror("Error opening pipe");
        return EXIT_FAILURE;
    }

    // Read and print the output of the command
    char buffer[128];
    while (fgets(buffer, sizeof(buffer), pipe) != NULL) {
        printf("%s", buffer);
    }

    // Close the pipe
    if (pclose(pipe) == -1) {
        perror("Error closing pipe");
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}




6)write a program to create two thread one will print the number from 1 to 10 and the other thread will find whether a number entered by the user is even or odd in c programmimg
#include <stdio.h>
#include <pthread.h>

// Function to print numbers from 1 to 10
void *printNumbers(void *arg) {
    for (int i = 1; i <= 10; i++) {
        printf("Thread 1: %d\n", i);
    }
    pthread_exit(NULL);
}

// Function to check whether a number is even or odd
void *checkEvenOdd(void *arg) {
    int *num = (int *)arg;
    
    if (*num % 2 == 0) {
        printf("Thread 2: %d is even.\n", *num);
    } else {
        printf("Thread 2: %d is odd.\n", *num);
    }
    
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;
    int userNumber;

    // Create Thread 1 to print numbers
    if (pthread_create(&thread1, NULL, printNumbers, NULL) != 0) {
        perror("Thread creation failed");
        return 1;
    }

    // Wait for Thread 1 to finish
    pthread_join(thread1, NULL);

    // Get a number from the user
    printf("Enter a number: ");
    scanf("%d", &userNumber);

    // Create Thread 2 to check even or odd
    if (pthread_create(&thread2, NULL, checkEvenOdd, &userNumber) != 0) {
        perror("Thread creation failed");
        return 1;
    }

    // Wait for Thread 2 to finish
    pthread_join(thread2, NULL);

    return 0;
}



7)write a program using system call which will read from third character to 10th character from a file open in a read only mode in c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    // Open the file in read-only mode
    int fileDescriptor = open("example.txt", O_RDONLY);

    // Check if the file is opened successfully
    if (fileDescriptor == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Set the offset to the third character in the file
    off_t offset = lseek(fileDescriptor, 2, SEEK_SET);  // 2 represents the third character (0-based index)

    // Check if lseek was successful
    if (offset == -1) {
        perror("Error setting file offset");
        close(fileDescriptor);
        exit(EXIT_FAILURE);
    }

    // Read characters from the third to the tenth position
    char buffer[9];  // 9 characters (from the 3rd to the 10th)
    ssize_t bytesRead = read(fileDescriptor, buffer, sizeof(buffer) - 1);

    // Check if read was successful
    if (bytesRead == -1) {
        perror("Error reading file");
        close(fileDescriptor);
        exit(EXIT_FAILURE);
    }

    // Null-terminate the buffer
    buffer[bytesRead] = '\0';

    // Display the read characters
    printf("Read from the third to tenth character: %s\n", buffer);

    // Close the file
    close(fileDescriptor);

    return 0;
}







8)write a program to create following hierarchy and verify the relation between the processes while processes P1 has two child P2 and P3 in c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid_P1, pid_P2, pid_P3;

    // Create process P1
    pid_P1 = getpid();
    printf("P1 (PID: %d) is the parent process.\n", pid_P1);

    // Create process P2
    pid_P2 = fork();
    if (pid_P2 == 0) {
        // This is the child process (P2)
        printf("P2 (PID: %d) is the child process of P1 (PID: %d).\n", getpid(), pid_P1);
        exit(0);
    } else if (pid_P2 < 0) {
        // Fork failed
        perror("Failed to fork P2");
        exit(EXIT_FAILURE);
    }

    // Create process P3
    pid_P3 = fork();
    if (pid_P3 == 0) {
        // This is the child process (P3)
        printf("P3 (PID: %d) is the child process of P1 (PID: %d).\n", getpid(), pid_P1);
        exit(0);
    } else if (pid_P3 < 0) {
        // Fork failed
        perror("Failed to fork P3");
        exit(EXIT_FAILURE);
    }

    // P1 waits for both P2 and P3 to finish
    waitpid(pid_P2, NULL, 0);
    waitpid(pid_P3, NULL, 0);

    return 0;
}

9)write a program to create the following hierarchy and verify the relation using get pid and get ppid p1->p2->p3 in c programming
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid1, pid2, pid3;

    // Creating the first process (p1)
    pid1 = getpid();
    printf("p1 (PID: %d)\n", pid1);

    // Creating the second process (p2)
    if ((pid2 = fork()) == 0) {
        // This code runs in the child process (p2)
        printf("p2 (PID: %d, Parent PID: %d)\n", getpid(), getppid());

        // Creating the third process (p3) inside p2
        if ((pid3 = fork()) == 0) {
            // This code runs in the child process (p3)
            printf("p3 (PID: %d, Parent PID: %d)\n", getpid(), getppid());
        } else {
            // Wait for p3 to finish before p2 exits
            wait(NULL);
        }
    } else {
        // This code runs in the parent process (p1)
        // Wait for p2 to finish before p1 exits
        wait(NULL);
    }

    return 0;
}


10)write a program to create one parent process and one child process also display ID of both processes in c programming
#include <stdio.h>
#include <unistd.h>

int main() {
    // Get the process ID of the parent
    pid_t parentPID = getpid();

    // Display the parent process ID
    printf("Parent Process ID: %d\n", parentPID);

    // Create a child process
    pid_t childPID = fork();

    if (childPID < 0) {
        // Fork failed
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (childPID == 0) {
        // Code executed by the child process
        pid_t childProcessID = getpid();
        printf("Child Process ID: %d\n", childProcessID);
    } else {
        // Code executed by the parent process
        // Parent continues its execution
    }

    // Code executed by both parent and child processes

    return 0;
}

